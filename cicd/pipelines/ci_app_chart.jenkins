pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
spec:
  serviceAccountName: jenkins
  securityContext:
    runAsUser: 1000
    fsGroup: 1000
  containers:
  - name: shell
    image: ubuntu
    command: ["sleep"]
    args: ["infinity"]
    tty: true
  - name: helm
    image: alpine/helm:latest
    command: ["sleep"]
    args: ["infinity"]
'''
            defaultContainer 'shell'
        }
    }
    environment {
        HELM_CACHE_HOME = "${WORKSPACE}/.helm/cache"
        HELM_CONFIG_HOME = "${WORKSPACE}/.helm/config"
        HELM_DATA_HOME = "${WORKSPACE}/.helm/data"
        CHART_DIR = "k8s/pp-chart"
        CHART_NAME = "pp-app"
        CHART_VERSION = "1.0.0"
        REGISTRY_URL = "ghcr.io/passed-pawn-dev/pp-dev-ops/charts"
    }
    stages {
        stage('Package and Push Chart') {
            when {
              anyOf {
                  changeset "k8s/pp-chart/**"
                  // initial run right away when changing pipeline
                  changeset "cicd/pipelines/ci_app_chart.jenkins"
              }
            }
            steps {
                container('helm') {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'pp-cicd-github-service-account-personal-access-token',
                            usernameVariable: 'REGISTRY_USER',
                            passwordVariable: 'REGISTRY_TOKEN'
                        )
                    ]) {
                        sh '''
                            echo "Logging into OCI registry..."
                            echo "$REGISTRY_TOKEN" | helm registry login ghcr.io -u "$REGISTRY_USER" --password-stdin

                            echo "Setting values.yaml (default values for the packaged chart)..."
                            mv ${CHART_DIR}/values.dev.yaml ${CHART_DIR}/values.yaml

                            echo "Packaging Helm chart..."
                            helm package ${CHART_DIR} --version ${CHART_VERSION}
                            
                            echo "Pushing chart to OCI registry..."
                            helm push ${CHART_NAME}-${CHART_VERSION}.tgz oci://${REGISTRY_URL}
                            
                            echo "Cleaning up..."
                            rm -f ${CHART_NAME}-${CHART_VERSION}.tgz
                            mv ${CHART_DIR}/values.yaml ${CHART_DIR}/values.dev.yaml
                        '''
                    }
                }
            }
        }
    }
}