properties([
    parameters([
        string(name: 'PREV_CHART_VERSION_ID', defaultValue: params.PERSISTENT_VALUE ?: "none", description: 'Previous app chart tag')
    ])
])

pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
spec:
  serviceAccountName: jenkins
  securityContext:
    runAsUser: 1000
    fsGroup: 1000
  containers:
  - name: helm
    image: alpine/helm:latest
    command: ["sleep"]
    args: ["infinity"]
'''
        }
    }
    environment {
        HELM_CACHE_HOME = "${WORKSPACE}/.helm/cache"
        HELM_CONFIG_HOME = "${WORKSPACE}/.helm/config"
        HELM_DATA_HOME = "${WORKSPACE}/.helm/data"
        CHART_DIR = "k8s/pp-chart"
        CHART_NAME = "pp-app"
        REGISTRY_URL = "ghcr.io/passed-pawn-dev/pp-dev-ops/charts"
    }
    
    stages {
        stage('Execute pipeline') {
            when {
                anyOf {
                    changeset "k8s/pp-chart/**"
                    // initial run right away when changing pipeline
                    changeset "cicd/pipelines/ci.jenkins"
                }
            }
            
            stages {
                stage('Prepare Version') {
                    steps {
                        script {
                            def date = new Date().format('yyyy-MM-dd-HH-mm-ss', TimeZone.getTimeZone('GMT+2'))
                            
                            // Get short commit hash (first 7 characters)
                            def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            
                            env.CHART_TAG = "${date}-${commitHash}"
                        }
                    }
                }
                stage('Delete current package'){
                    steps {
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'pp-cicd-github-service-account-personal-access-token',
                                usernameVariable: 'REGISTRY_USER',
                                passwordVariable: 'REGISTRY_TOKEN'
                            )
                        ]) {                        
                            script {
                                def response = sh(script: '''
                                    curl -L \
                                      -X DELETE \
                                      -H "Accept: application/vnd.github+json" \
                                      -H "Authorization: Bearer $REGISTRY_TOKEN" \
                                      -H "X-GitHub-Api-Version: 2022-11-28" \
                                      https://api.github.com/orgs/passed-pawn-dev/packages/container/pp-dev-ops%2Fcharts%2Fpp-app
                                ''', returnStdout: true)
                                
                                echo "Delete package response: ${response}"
                            }
                        }
                    }
                }
                stage('Set chart default values.yaml') {
                    steps {
                        sh '''
                            echo "Setting values.yaml (default values for the packaged chart)..."
                            mv ${CHART_DIR}/values.dev.yaml ${CHART_DIR}/values.yaml      
                        '''
                    }
                }
                stage('Package and Push Chart') {
                    steps {
                        container('helm') {
                            withCredentials([
                                usernamePassword(
                                    credentialsId: 'pp-cicd-github-service-account-personal-access-token',
                                    usernameVariable: 'REGISTRY_USER',
                                    passwordVariable: 'REGISTRY_TOKEN'
                                )
                            ]) {
                                sh '''
                                    echo "Logging into OCI registry..."
                                    echo "$REGISTRY_TOKEN" | helm registry login ghcr.io -u "$REGISTRY_USER" --password-stdin

                                    echo "Packaging Helm chart..."
                                    helm package ${CHART_DIR} --version ${CHART_TAG}
                                    
                                    echo "Pushing chart to OCI registry..."
                                    helm push ${CHART_NAME}-${CHART_TAG}.tgz oci://${REGISTRY_URL}
                                '''
                            }
                        }
                    }
                }
                stage('Cleanup'){
                    steps {
                        sh '''
                            echo "Cleaning up..."

                            rm -f ${CHART_NAME}-${CHART_TAG}.tgz
                            mv ${CHART_DIR}/values.yaml ${CHART_DIR}/values.dev.yaml
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                // Only trigger CD if the main stages executed
                if (env.CHART_TAG) {
                    build job: "pp-dev-ops-cd-pipeline", 
                          wait: false, 
                          parameters: [string(name: 'TAG_TO_BUILD', value: env.CHART_TAG)]
                }
            }
        }
    }
}